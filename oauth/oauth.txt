OICD = OpenID Connect

An oAuth Server
https://oauth2,thephpleague.com/
Google OAuth 2.0 Palyground
https://developers.google.com/oauthplayground/

OAuth as a service
API Access Management
https://developer.okta.com/        

Token Introspection Extension
https://jwt.io
(or local libraries)
decode Jason Web Tokens (JWT),

The code for this course
========================
https://github.com/caseysoftware/oauth-and-openid-connect

Describing OAuth2.0
===================
Oauth is a framework for user to delegate access to 1 system over to another system
You are autorizing one system to act on behalf of you to that other system
You can do this to share data, functionality

Athentication (AuthN)
=====================
Who are you

Authorization (AuthZ)
=====================
What can you do

OAuth2 is an authorization framework

OpenID Connect is an OAuth 2.0 extension putting function and form to a users's profuile information.
OpenID Connect is a special case of OAuth2.0

Making OAuth 2.0 usefull with extensions
========================================

OAuth 2.0 Framework
Loose operating agreement, not a contract

Extensions
==========

1. OpenIdConnect 
Provides a standard way to request and share profile data
Gives us "Sign in with " on hundreds of sites
Derpends on JSON Web Tokens, or JWTs

2. Json Web Tokens (JWT)
RFC 7519
Oauth doesn't require JWTs, but they are commeon
JWTs are encoded, not encrypted
JSOM Web Encryption (JWE)
Includes:
iss (issuer)
iat (issued at)
sub (sunject)
aud (audience)
exp (expiration)

3. RFC 7662 Token IntrospectionExamines a token to describe tis contents
Useful for opaque tokens
Describes if the token is active or notMandatory if you have Tkoen Revocation

4. RFC 7009 Token Revocation
Revokes (cancels) a token via API
Technically optional
In prectice, required

RFC 8636 Auth Code with PKCE
(End user facing extension)
Usefulle for protecting  client-side flows (mobile devices, SPAs)
Rpleaces the implicit grant type

RFC 8693 Token Exchange
Introduces an approach for tradinbg or exchanging tokens on behalf of another  user or service, aka dlelegation.

RFC 8414 Authorization Server Metadata

OpenID Connect
==============
OIDC is an extensin on top of Oauth2.0
OIDC replaces SAML for Single Sign-On

OAuth 2.0 Fundamentals
======================
1. Resource owner - that is you
2. Resource server - what you are granting access to. Able to validate the token and allow requesting access
3. Grant type - how the application is asking for access
4. Scope - what access the application is requesting
5. Authorization server - who is the application asking for access - grant type and scope is sent to the authorization server
6. Token - how the application gets that access 
7. Claims - the content or information in the token

You (resource owner) want access to a room (the resource).
The front desk is the Authorization server.
Key card (token)

Undestanding the OAuth Endpoints
================================
RFC 6749: OAuth Core

/authorize
The endpoint taht the enduser (reresource owner interacts with togrant permission for the application to access the resource
Could retun n authorization code or a token

Evaluate our grant type and our scope request.

/token
The endpoint that the application uses to trade an autohrization code or refreshtoken for an accesstoken

The following endpoints are optional
====================================
/userinfo
The endpoint that applicatins use to retreive profile information about the authenticated user.

Returnt the claims about a user.

This returns a spec-defined set of fields, depending on the permissions (scope) requested.

RFC 8414. Oauth Authorization Server Metadata Discovery
The endpont that applications use to retrieve the configuration information fir the authorizationserver.

/introspect
The endpoint that applications 
TODO

/revoke

Grant types
===========
Authorization code
Implicit or hybrid
Resource Owner Password
Client Credentals
Device CodeAuthorization Code with PKCE

Are you authorizing on behalf of a user or a service?
Does the system in question have a web browser available?
In the application entirely server side, or does it have a clinet side component?

Oauth Scopres
=============
A set of permessions, you can request (example CRUD)

Example: okta.apps.read

OpenID Connect Scopes:
openid
profileemaik
address
phone

Using the OAuth Playground
==========================
https:developers.google.com&/oauthplayground

Oauth 2.0 tokens
================

1. Access token (Intended for the resource server)
The access token is a string representing an authorization issued to the client. This strong s usually opaque to the client.
Tokens represent specific scopes and durations of access, granted by the resource owner, and enforced by the resource server and autorization server.

- **Purpose**: Used to gain access to protected resources on behalf of the user. 
- **Usage**: Sent in API requests to authenticate and authorize access. 
- **Content**: Contains information like scopes, expiration, and other metadata required by the resource server to validate the token. 
- **Audience**: Intended for the resource server. 

2. Refresh token
A refresh token is a string representing the authorization granted to the client be the resource owner. The string is usually oopaque to the client. 
The token denotes an identifier used to retrieve the autorization information.

You can use a refresh token to request a new access token. Only for use with the authorization server


How is a token structured?
X. Opaque Tokens - there is nothing to see here.
Y. JSON Web Token (JWT) Full of authorizatin nd profile data.  Base 64 encoded string containing signature information to verify who sent it, and the data in it.

3. ID token (Intended for the client application)
The primary extension that OpenID Connect makes OAuth 2.0 to enbale End-Users to be Authenticated is the ID token data structure.
The ID token is a security token, that contains claims about the authentication of a end-user by an authorization server, when using a client, and potetially other requested claims.
The ID token is represented as a JSON Web Token (JWT).

- **Purpose**: Used to authenticate the user and provide information about the user. 
- **Usage**: Typically used in OpenID Connect (OIDC) to verify the user's identity. 
- **Content**: Contains claims about the user, such as their identity, authentication time, and other profile information. 
- **Audience**: Intended for the client application to validate the user's identity. 
 
In summary, an access token is used for authorization, while an ID token is used for authentication.
====================================================================================================

Validating JWTs
===============
Validating establishes trust - anything else is irresponsible.

Retrieve your signing keys - read the documentation from the OAuth provider. The public key of the sender.

3 parts separated by periods.

1. Header - tells us the algoritm used to generate the token.
2. Payload
3. Signature - Use the signing key to sign the payload and compare against the original structure.


Sign the payload using the public key of the sender. The result should mathc the signature received in the token.

The payload contains some key/value pairs called claims.

iss: Issuer of the token. Usually the Authorization server. Make sure this fild is what you expect.
sub: The entity ? the token is about. The enduser authenticated or the system, that requested the token.
aud: The inrended audience of the token. The application which requested the token.
iat: Issued at time

Check out https//jwt.io to find a library for toekn validation - matching the algoritm use need.

Handling Token Safely
=====================
Access and refresh tokena are credentials
Use TLS
Use Secure Cookies

ID token is going to the ownerDo not embed sensitive data
Use the token to retrieve sensitive infomation from the resource server directly.

Exchange  refresh token for en new acccess token.

Grant type. Authorization Code flow.
===================================
1. The user authenticates
2. The application (for example Web App, that the ser is using) authenticates

The autorization server now knows, who it granted a token to and for which app.

At no time did the application have the chance to touch our password
The user and the browser never had the chhance to touch the access token.

Onely the one-time-use authorization code is exposed,
The application never sees the user's credentials
The user never sees the access or refrsh tokens

User get back an auth code from the authorization server

The application uses the auth code and the clinet secret to get an access token (and optionally refresh token)

When should you use this
========================
TODO

