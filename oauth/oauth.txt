OICD = OpenID Connect

An oAuth Server
https://oauth2,thephpleague.com/
Google OAuth 2.0 Palyground
https://developers.google.com/oauthplayground/

OAuth as a service
API Access Management
https://developer.okta.com/        

Token Introspection Extension
https://jwt.io
(or local libraries)
decode Jason Web Tokens (JWT),

The code for this course
========================
https://github.com/caseysoftware/oauth-and-openid-connect

Describing OAuth2.0
===================
Oauth is a framework for user to delegate access to 1 system over to another system
You are autorizing one system to act on behalf of you to that other system
You can do this to share data, functionality

Athentication (AuthN)
=====================
Who are you

Authorization (AuthZ)
=====================
What can you do

OAuth2 is an authorization framework

OpenID Connect is an OAuth 2.0 extension putting function and form to a users's profuile information.
OpenID Connect is a special case of OAuth2.0

Making OAuth 2.0 usefull with extensions
========================================

OAuth 2.0 Framework
Loose operating agreement, not a contract

Extensions
==========

1. OpenIdConnect 
Provides a standard way to request and share profile data
Gives us "Sign in with " on hundreds of sites
Derpends on JSON Web Tokens, or JWTs

2. Json Web Tokens (JWT)
RFC 7519
Oauth doesn't require JWTs, but they are commeon
JWTs are encoded, not encrypted
JSOM Web Encryption (JWE)
Includes:
iss (issuer)
iat (issued at)
sub (sunject)
aud (audience)
exp (expiration)

3. RFC 7662 Token IntrospectionExamines a token to describe tis contents
Useful for opaque tokens
Describes if the token is active or notMandatory if you have Tkoen Revocation

4. RFC 7009 Token Revocation
Revokes (cancels) a token via API
Technically optional
In prectice, required

RFC 8636 Auth Code with PKCE
(End user facing extension)
Usefulle for protecting  client-side flows (mobile devices, SPAs)
Rpleaces the implicit grant type

RFC 8693 Token Exchange
Introduces an approach for tradinbg or exchanging tokens on behalf of another  user or service, aka dlelegation.

RFC 8414 Authorization Server Metadata

OpenID Connect
==============
OIDC is an extensin on top of Oauth2.0
OIDC replaces SAML for Single Sign-On

OAuth 2.0 Fundamentals
======================
1. Resource owner - that is you
2. Resource server - what you are granting access to. Able to validate the token and allow requesting access
3. Grant type - how the application is asking for access
4. Scope - what access the application is requesting
5. Authorization server - who is the application asking for access - grant type and scope is sent to the authorization server
6. Token - how the application gets that access 
7. Claims - the content or information in the token

You (resource owner) want access to a room (the resource).
The front desk is the Authorization server.
Key card (token)

Undestanding the OAuth Endpoints
================================
RFC 6749: OAuth Core

/authorize
The endpoint taht the enduser (reresource owner interacts with togrant permission for the application to access the resource
Could retun n authorization code or a token

Evaluate our grant type and our scope request.

/token
The endpoint that the application uses to trade an autohrization code or refreshtoken for an accesstoken

The following endpoints are optional
====================================
/userinfo
The endpoint that applicatins use to retreive profile information about the authenticated user.

Returnt the claims about a user.

This returns a spec-defined set of fields, depending on the permissions (scope) requested.

RFC 8414. Oauth Authorization Server Metadata Discovery
The endpont that applications use to retrieve the configuration information fir the authorizationserver.

/introspect
The endpoint that applications 
TODO