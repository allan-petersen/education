1. Web, which includes Tomcat and Spring MVC
2. Rest repositories to expose Spring Data repositories over Rest
3. Java persistence API
4. H2 in mempry database driver

Initializr generates the project.
https://start.spring.io

com.example.ec.explorecali
explorecali

Spring Data JPA
===============
To load data from a database the @SpringBottApplication class can implement the CommandlineRunner

RESTful APIs
============
Spring Data REST

HTTP POST /tourPackages/ {<request body>}    201 CREATED
HTTP GET /tourPackages/<code>                404 NOT FOUDND
HTTP PUT ot PATCH /tourPackages/<code>
HTTP DELETE /tourPackages/<code>

tourPackeges/search // Giver options

tourPackeges/search/findBYName?name=Backpacl%Cal

Paging and sorting
==================
Url parameters: size, page, sort

Controlling API Exposure
========================
@RepositoryRestResource(collectionReseorceRel = "packages, path = "packages")

profie

HAL Browser:
localhost:8080


Expose RESTful APIs with Spring MVC
===================================
@RestController

A REST Controller class mediates between web requests and the internals of the applications

Spring MVC
Client Request -> Ny RestController class -> My Service

Spring DATA Rest
Client Request ->pring Data REST -> My Spring Data RepositoryRestResource

Spring Web MVC
Not Using Spring Data repositories
API launches an algorithm
Hide internal data model (entity schema)
Require business layer service

Example RestController
======================
@RestController
@RequestMapping(path = "/exmaples")
public class ExampleRestcontroller {

   // CREATE
   @PostMapping
   @ResonseStatus(HttpStatus.CREATED) // Overrides default return status HTTP 200, HTTP.CREATED is 201
   public Example create(@RequestBody Example example)
   
   // Default request body format is JSON
   
   // READ
   @GetMapping
   public List<Example> getAllExamples()
   
   @GetMapping(path = "/{id})
   public static Example getOneExample(@PathVariable(value = "id") int id)
   
   // UPDATE
   @PutMapping(path = "/{id})
   public Example updateAll(@PathVariable(value = "id") int id, @RequestBody Example example)
   
   @PatchMapping(path = "/{id})
   public Exmple updateSome(PathVariable(value = "id") int id, @RequestBody Example example)
   
   // DELETE
   @dELETEMapping(path = "/{id})
   public Exmple DELETE(PathVariable(value = "id") int id)
   
}

For maintainablility Each class should map to only ine resorce (here the resource is example)

Use case
========
Nouns:
score
comment
customer identifier
tour

Create RestController HTTP POST method
======================================

Can all the attributes of a TourRating be sent in the request body

TourRaingPK = Tour tour, Integer customerId
The client dos  ot want to send aTour in the request, but probably a Tour identifier

So we should create a Data Transfer Object (DTO) to encapsulate the request body.

RatindDTO - score, comment, custimerId
NO tourId attribute
The toourId is going to be a parameter on the URL.

@ResponseStatus(HttpStatus.NOT_FOUND)
@ExceptionHandler(NuSuchElementException.class)
public String retur400(NoSuchElementexception ex) {
   return ex.getMessge();
}

@PostMapping@ResponseStatus(HttpStatus.CREATED)
public void createTourRating(@PathVariable(Vvalue = "tourId") int tourId, @RequestBody @Validated RatingDto ratingDto) {
   Tour tour = verfyTour(id);
   tourRationRepository,save(new TourRating(new TourRatingPk(tour, ratingDto.getCustomerId), ratingDto.getScore(), ratingDto.getcomment()));

}

// Create a new tour ratingDtoPOST http://localhost:8080/tours/1/ratings/

Create RestController HTTP GET methods
======================================
Hide the implememtation, return a lst of TourDTO objects


/average at the end
return adjacent package with a key-value pair of the word averge an then the avarge value.

@GetMapping
public List<RatingDTo> getAllRatingsForTour(@PathVariable(value = "tourId") int tourId

@GetMapping(path="/average2)
public Map<String, Double> getAverage(@PathVariable(value = "tourId") int tourId

create RestController HTTP PUT, PATCH, and DELETE methods
=========================================================
PUT all the attributes are updated
PATCH only update some methods on the entity


@RequestBody @Validated RatingDto

TODO: Update with patch



