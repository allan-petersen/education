1. Web, which includes Tomcat and Spring MVC
2. Rest repositories to expose Spring Data repositories over Rest
3. Java persistence API
4. H2 in mempry database driver

Initializr generates the project.
https://start.spring.io

com.example.ec.explorecali
explorecali

Spring Data JPA
===============
To load data from a database the @SpringBottApplication class can implement the CommandlineRunner

RESTful APIs
============
Spring Data REST

HTTP POST /tourPackages/ {<request body>}    201 CREATED
HTTP GET /tourPackages/<code>                404 NOT FOUDND
HTTP PUT ot PATCH /tourPackages/<code>
HTTP DELETE /tourPackages/<code>

tourPackeges/search // Giver options

tourPackeges/search/findBYName?name=Backpacl%Cal

Paging and sorting
==================
Url parameters: size, page, sort

Controlling API Exposure
========================
@RepositoryRestResource(collectionReseorceRel = "packages, path = "packages")

profie

HAL Browser:
localhost:8080


Expose RESTful APIs with Spring MVC
===================================
@RestController

A REST Controller class mediates between web requests and the internals of the applications

Spring MVC
Client Request -> Ny RestController class -> My Service

Spring DATA Rest
Client Request ->pring Data REST -> My Spring Data RepositoryRestResource

Spring Web MVC
Not Using Spring Data repositories
API launches an algorithm
Hide internal data model (entity schema)
Require business layer service

Example RestController
======================
@RestController
@RequestMapping(path = "/exmaples")
public class ExampleRestcontroller {

   // CREATE
   @PostMapping
   @ResonseStatus(HttpStatus.CREATED) // Overrides default return status HTTP 200, HTTP.CREATED is 201
   public Example create(@RequestBody Example example)
   
   // Default request body format is JSON
   
   // READ
   @GetMapping
   public List<Example> getAllExamples()
   
   @GetMapping(path = "/{id})
   public static Example getOneExample(@PathVariable(value = "id") int id)
   
   // UPDATE
   @PutMapping(path = "/{id})
   public Example updateAll(@PathVariable(value = "id") int id, @RequestBody Example example)
   
   @PatchMapping(path = "/{id})
   public Exmple updateSome(PathVariable(value = "id") int id, @RequestBody Example example)
   
   // DELETE
   @dELETEMapping(path = "/{id})
   public Exmple DELETE(PathVariable(value = "id") int id)
   
   
   
   

}

For maintainablility Each class should map to only ine resorce (here the resource is example)


