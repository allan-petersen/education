Reactive programming
====================
Build async , non blocking and event-driven apps that scale.
Work with async data streams.
Streams emit values over time

Angular
=======
Angular is a mature web and mobile framework, that can we uses with JavaScript of TypeScript.
Build modern apps on web and mobile
Angular CLI accelerates development
Excellent docs and tooling:
https://angular.io.docs
https://github.com/angular/angular

Angular is scalable for large data sets allowing you to
build data models with RxJS or other reactive frameworks
Write async or callback-based code
 
RxJS
==== 
RxJS library is a JavaScript-specific
RxJS Onserver Pattern
RxJS is a JavaScrpt flavor of ReactiveX
One of the core consepts of ReactiveX is:
An observable representation of a set of values, that can push a notification upon state change.
A subject is a specific flavor of observable, that can multicast to multiple observers.
An observer implements an interface, that allows it to consume push notifications from an Oservable in a consistent mamnner.

Subject - a fla vor of an Observable

3 Observers (example)

1. Each observer will subscribe to the subject
2. Event - causes subject to change state
3. The subject will notify all the subscribed observers of the change

Reactive Spring Boot
====================
Spring 5.0 - Projecr Reactor
Spring WebFlux allows you to expose fully non blocking reactive endpoints in your res API
Spring 5 uses Netty as its web server

Event loop -> Netty -- Mono --> Reactor (Web API --Mono --> WebFlux -- Mono --> Controller

Event loop hands off incoming requests 
The response is sent to the Spring reactive stack web framework calles WebFlux
Last in the chain the controller handles the request in a non blocking manner

When a reqauest is complete, the response is sent back up the chain.
Event loop returns response sto the client.

Fast en effiecient messaging: can sustain high througput rates of 15 million-plus messages per second
Flexible non-blocking I/O. backuppressure-enabled network engines for HTTP, TCP/UDP, adn WebSockets

Functional Endpints: Lambda-based, ligthweight functional model

Benefits of using reactive programming with Spring
==================================================
Spring 5.0 leverages an indystri standard Reactive Streams implementation called Project Reactor.
Spring WebFlux allows you to expose fully non blocking reactivre endpoints in your rest API.
By default spring5 ued Nett as its  web server.

Flexible non bocking I/o: Backpressure-enabled netwok engines for HTTP, TCP/UDP and Websockets.

See; https://projectreactor.io

Annotated controllers: Similar to annotations from Spring MVC.

Functional Endpoints: Lambda based, lightweight functional model

Integrate Angular and Spring
============================
Angular apps on mobile and web generally interact with Spring boot via HTTP
Spring Boot exposes various endpoints via a REST API

HTTP Verb	Domain		Version		Resource			Path parameter
GET			/room		/v1			/reservation		/{id}	

Resource: room reservation

Angular Project
1. Components: HTML, CSS, images and Typescript or JavaScript
2. npm modules: Browserify, Babel etc.
3. Content Committee: Unit Testing, Karma, Jasmine. 
           Protractor (end to end testing). Bult on WebDriver JS, which is a part of Selenium

High-Level Angular and Spring Reactive Flows
============================================
Spring 5 Flux
Reactive Streams Publisher
Emits 0 to N elements
Completes successfully after emitting all elements or with an error

Bootstrap a Spring 5 App with Spring Initialzr

Using Spring WebFlux
====================
Spring WebFlux vs. Spring MVC








MongoDb
=======
In summary, a Docker image is like a blueprint or a snapshot of an application and its dependencies, 
while a Docker container is the running instance of that image. 
Images are static, whereas containers are dynamic and can be modified during their lifecycle.
docker pull mongo
docker run --name mongodb -d -p 27017:27017 mongo

Websockets
==========
WebSockets is a communication protocol that provides full-duplex communication channels over a single, long-lived connection between a client and a server. It is designed to work over the same ports as HTTP and HTTPS (typically ports 80 and 443), allowing it to easily pass through firewalls and proxies.

Key features of WebSockets include:

1. **Full-Duplex Communication**: Unlike HTTP, which is a request-response protocol, WebSockets allow for simultaneous, two-way communication between a client and server. This means both parties can send and receive messages independently at any time.

2. **Persistent Connection**: Once a WebSocket connection is established, it remains open, allowing for continuous data exchange without the overhead of repeatedly opening and closing connections, which is common with traditional HTTP requests.

3. **Low Latency**: Because the connection remains open, WebSockets have lower latency compared to HTTP, making them ideal for real-time applications like chat apps, live sports updates, gaming, and other interactive applications.

4. **Efficiency**: WebSockets reduce the amount of data transmitted over the network by eliminating the need for HTTP headers with each message, which can lead to more efficient use of resources.

WebSockets are initiated via an HTTP handshake, after which the connection is upgraded to the WebSocket protocol, allowing for the aforementioned benefits.


















Typescript