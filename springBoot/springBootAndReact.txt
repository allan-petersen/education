Spring Boot and React
Build Scalable and Dynamic Web Apps

Node.js version 19.6.0

See React.js Essential Training

React for UI
============
Thymeleaf: Renders every page serverside and powered by a Spring Boot Controller

React: seep learningcurve.
2 step build.

Install react
=============
npx create-react-app src/ui
cd src/ui
npm install react-router-dom

Setting up the build:

Node server, that exposes the react application on port 3000
(Static files and HTML pages and some JavaScript)
Node is doing the serving of the application.'

SpringBoot aapplication on port 8080.
Sring web can also serve static files in src/main/resources/static
(They get served at the root of tha appication context)

We do not want to run 2 application server

We need to get the output of the build cycle of the react application it src/main/resources/static

We will use a Maven plugin to run the npm build 

See 01_04b

cd wisdom-pet
set JAVA_HOME=C:\tools\Eclipse Adoptium\jdk-23.0.1.11-hotspot
java -jar target/wisdom-pet-0.0.1-snapshot.jar

Understanding the archetecture
==============================
React -> Sprng WEB ->Sring Data ->Data
React ->SpringGraphQL ->Sring Data -> Data

Spring Web. Rest
================

Starting the UI
===============
Outlet is how we are going to load this as a common pattern acreoos all of our elements

Start from terminal:

C:\work\wisdom-pet\src\ui>
npm start

Start the backend
=================
run WisdomPetApplication

Building a component
====================

Create a list page for each resources
Consider on product, how you will display vendor, try displaying the name instead of the id
Don' forget to handle the routes

Vendor
Service
Product

Style thr app using Bootstrap or MUI.

Security with React and Spring Boot is not an easy topic.
Consider using external authentication where possible. So there are QAoth providers and SAML providers. Or yoy have LDAP available.
I offload it to an NGINX instance, that fromts all of my applications with a JWT-based provider.
In front of my Cubernetes cluster, that allows me to proxy request to private services.

This is really a much more modern pattern of using JWT external to your application - as opposed to using traditional forms based autehntication.












TODO: 
GraphQL
JFPC





