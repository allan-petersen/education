Open Api Sepicification (OAS) - Former Swagger specification
=============================
See: https://github.com/OAI

Standard format for metadata used to define RESTful services

Used to describe or define RESTful web services

The metadata is machine readable.

https://github.com/OIA/OpenAPI-Secification/blob/master/versions/3.0.0,md

Go to the schema section:
openapi: REQUIRED
info: REQUIRED
paths: REQUIRED (CAPABILITIES)



openapi: 3.0.0
info:
  title: H Sports Plus API   
  version: 1.0.0
paths:
  /product:
    get:
      responses:	
        200:
          description: This is a list of the products
          content:
            application/json:
              schema:
                type: array
                items: 
                  properties:
                    id:
                      type: integer
                      example: 400
                    name:
                      type: string
                      example: Lemon Water
				    

Example 1
=========
openapi: 3.0.0
info:
  title: H Sports Plus API   
  version: 1.0.0
tags:
  - name: Article
    description: Articles for the H Plus Sport Blog
paths:
  /product:
    get:
	  tags:
	    - Article
      responses:	
        200:
          description: This is a list of the products
          content:
            application/json:
              schema:
                type: array
                items: 
				  type: object
                  properties:
                    id:
                      type: integer
                      example: 400
                    created:
                      type: string
					  format: date
                      example: 2023-09-26
                    tagline:
                      type: string
                      example: Lemon Water
                    content:
                      type: string
                      example: Bla bla
                    category:
                      type: string
                      example: My category
                    taglist:
                        type: array
                        items:
                          type: string
                          example: 1. tag, 2 tag


Paramters:						  
get:
  paramters:
    - in: query
      name. pagenumber 
	  description: Page number to return
	  required: false
	  schema: 
	    type:integer  
        example: 1	
    - in: header		
	  namer: customer-security-header 
	  required: false
	  sechma:
	    type: false.
		
POST (or PUT) request (create, update)

   post:
     description: Add aprocut to the catalog
	 requestBody:
	   content:
	     application/json
		   sehema
		     type: object
			 properties:
			 ...
	 responses:		
       200:
         description: The product has been created	   
		
	
			
Template parameters in paths: Path varuiables

get /product/{productId}


paths:
  /product/{productId}
    get:
      paramters:
        - in: paths
          nmae: productId 
          required: true
          schema: 
            type: integer		  
            exmple: 12345
      reponses:	
        200	  

Reuse objects:
==============
components:
  schemas:
    Product:
	  type:
	  required:
	    -name
	  
$ref: '#/components/schemas/Product'  // Hash means current file


responses:
  500ApiError:
    description: This is an unexpected error
	content.
	  applicatin/json
	  schema:
	  type: object
	  properties:
	    statusCode:
		  type: string
		  example: 500
		message:
		  type: string
		  example: This is an error
		  
// Reference to common response:

500:
  $ref; '#/components/responses/500ApiError'		  
		 
Reuse query paramters:

parameters:
  PageNumber:
  ....
  
  - $ref: '#/components/parameters/PageNumber'
  - $ref: '#/components/parameters/PageSize'
  
Content Negatiation
===================

apllication/xml
  schema:
     $ref: '#/components/schemas/Product'  // Hash means current file
			

			
OpenAPI 3.0			

info
servers	security (API keys, OWA flows, or security cookies)
paths
tags (used to group API operations)	external docs (link to external resources about the API)
components: (common schema objects, parameters, request bodies, that may be used througout the API). Reuse components
			
OAS definitions can be build with either YAML or JSON			

The schema object allows the definition of input and output data types.

yaml
====
yaml (2 space indentions)

Swagger
=======
A toolset and structured approach for creating API, designs, documentation and code throuhout the API lifecycle

Can produce OAS compliant API definition

Open source tools:
Swagger editor
Swagger UI
Swagger codegen

https://github.com/swagger-api

nodejs
======
Install local http server.
npm install -g http-server

Swagger editor
==============
Save as yaml

Swagger UI
==========
Paste the definitio file into the dist folder of Swagger UI

Copy the dist catalog to your own workspace and rename it

Correct the URL in the index:

url: "hsports-api.yaml"

Start the http server to serve the apidocs directory

http_server api-docs -a 127.0.0.1 -p 8081

Swagger Hub
===========
Domians: Allows object definitions to be reused across API definitions

3.0.0

Template: Simpe API

Templates

tags:
  - name: customer
    description: customer releated calls  
	
	schema:
	  type: array
	  items:
	    $ref: '#/components/schemas/Customer'
		
Versioning:
		
Importing:

# Group operations
get:
   tags: 
     - product

Security schemes:

Template  
  Security schemes:
    Example. OAuth 2.0 Password
	
	securitySchemes:
	
	     # An API consumer can receive an access token from the tokenUrl, once providing the appropriate parwmters.
	     tokenUrl:
		 scope
    
	ecrity:
	  - password: [write]


Domains
=======
Across multiple API definitions

Select OpenAPI version 3.0.0	  

Reference domain from API:

$ref: 'https://api.swaggerhub.com/domains/hplussport1/hplus/1.0.0#/components/schemas/Customer'	

Nesting schemas into domains:	

format: date-time
example: 2023-0101T16:37:30-08:00  -- Difference from UTC

Reference locally:
$ref: "#/xcomponents/schemas/Customer'
		
In API definition

  /order
    post 
	  tags:
	    - order # specify an array of tags that apply to this operations
	  security
	    - password [write]
	  requestBody
        content:
		  application/json
		    schema: 
			  $ref: 'https://api.swaggerhub.com/domains/hplussport1/hplus/2.0.0#/components/schemas/Order'	
    responses:
	  200:
	    description: This is a successful response
		content:
		  application/json
		    schema: 
			  $ref: 'https://api.swaggerhub.com/domains/hplussport1/hplus/2.0.0#/components/schemas/Order'	
		
Enforcing API standards
=======================

"Gear" button.

Standardization tab

Example:

Operation must have one and only one tag


tags:
  - name: order
  - description: This is an order related operation
  

Auto Mocking APIs


servers:
   - description: SwaggerHub APÃ…I Auto MOCKING  
   url: https://virtserver.swaggerhub.com/hplussport1/catalog/1.0.0
   
   Try it out button
  
Adding Organization members



Inviting individual collaborators - work on specific API

Challenge
=========
Import the blog API definition to SwaggerHub and publish it
Create a new version
Update the POST operation to include API key security
Publish the API

Import excercise file 03_14_begin.yaml

securitySchemes:
  spiKey:
    type: apiKey
	name: api-key
	in: header  # Where to find the api-key 


post:
  security:
    - apiKey []

Capstone Project
================
In the couse prject, we will create an API solution centeres around our OAS API definition file for the H+ Sports catalog API. 
The solution will create an API implementation and integrate in with several cloud-based products to provide an end-to-end API solution.

TypeScript.
Generated Client

Spring.
Generated server



